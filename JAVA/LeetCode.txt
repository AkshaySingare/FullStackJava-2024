/* Q1.  Write a function to find the longest common prefix string amongst an array of strings.
	    If there is no common prefix, return an empty string "".	*/

import java.util.Scanner;

class Solution {
    public String comman(String s1, String s2) {

        int n = Math.min(s1.length(), s2.length());

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (s1.charAt(i) == s2.charAt(i))
                sb.append(s1.charAt(i));
            else
                break;
        }
        return sb.toString();
    }

    public String longestCommonPrefix(String[] strs) {
            
            String res = strs[0];
            for (int i = 1; i < strs.length; i++)
                res = comman(res, strs[i]);
            return res;
    }
}

public class temp {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        System.out.println("Enter Aray Size ");
        int len = sc.nextInt();
        sc.nextLine();
        String str[] = new String[len];

        for (int i = 0; i < str.length; i++) {
            System.out.println(i + "  Enter Word  ");
            str[i] = sc.next();
        }
        Solution s = new Solution();
        System.out.println(s.longestCommonPrefix(str));
    }
}
/*  Q2.  Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
      You may assume that each input would have exactly one solution, and you may not use the same element twice.
      You can return the answer in any order.
      Input: nums = [2,7,11,15], target = 9
      Output: [0,1]           */

class Solution {
    public int[] twoSum(int[] nums, int target) {

        for(int i=0;i<nums.length;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                if( nums[i] + nums[j] == target)
                {
                    return new int[] {i,j};
                }
            }
        }
        return new int[] {};
    }
}
public class Sum{
    public static void main(String x[]){
        int num[] = {2,7,11,15};
        int target = 9;

        Solution s = new Solution();
        int res[] = s.twoSum(num, target);

        System.out.println((res.length>0)? "[" +res[0]+ "," + res[1]+ "]" : "No Solution");
    }
}
/*
   Q3. Given an integer x, return true if x is a palindrome, and false otherwise.
    Input: x = 121
    Output: true
*/
import java.util.*;

class Solution {
    public boolean isPalindrome(int x) {
        if(x<0)
            return false;
        int temp = x;
        int rem = 0, rev = 0;
        while (temp != 0) { 
            rem = temp % 10; 
            rev = rev * 10 + rem; 
            temp /= 10; 
        }            
        if (rev == x)
            return true;
        else
            return false;
    }
}
public class Demo {
    public static void main(String x[]) {
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter Number");
        int num = sc.nextInt();

        Solution s = new Solution();
        System.out.println(s.isPalindrome(num));
    }
}

// Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M. roman to integer

import java.util.*;
class Solution {
    public int romanToInt(String s)
    {
         HashMap<Character,Integer> map = new HashMap<>();
         map.put('I',1);
         map.put('V',5);
         map.put('X',10);
         map.put('L',50);
         map.put('C',100);
         map.put('D',500);
         map.put('M',1000);

        int res = 0;
        for(int i=0;i<s.length();i++)
        {
            if((i+1) < s.length() && map.get(s.charAt(i+1)) > map.get(s.charAt(i)) )
                res = res - map.get(s.charAt(i));            
            else 
                res += map.get(s.charAt(i));
        }
         return res;
    }
}
public class Demo {
    public static void main(String x[]) {
        Solution s = new Solution();
        System.out.println(s.romanToInt("vi"));
    }
}