/* Q1.  Write a function to find the longest common prefix string amongst an array of strings.
	    If there is no common prefix, return an empty string "".	*/

class Solution {
    public String longestCommonPrefix(String[] strs) {
        char ch1[] = new char[strs[0].length()];
        char ch2[] = new char[strs[1].length()];
        char ch3[] = new char[strs[2].length()];

        for (int j = 0; j < strs[0].length(); j++) {
            ch1[j] = strs[0].charAt(j);
            // ch1[] = strs[0].toCharArray
        }

        for (int i = 0; i < ch2.length; i++) {
            ch2[i] = strs[1].charAt(i);
        }
        for (int i = 0; i < ch3.length; i++) {
            ch3[i] = strs[2].charAt(i);
        }
        int small=ch1.length;
        small = Math.min(small, ch2.length);
        small = Math.min(small, ch3.length);

        //  main code 
        String str="";
        for (int i = 0; i<small; i++) { // condition based on small word
            if (ch1[i] == ch2[i]) {     //to Compare charecters ch1 and ch2 array
                if (ch2[i]==ch3[i]) {
                    str = str+ch1[i];
                }
            }
            else{
                break;      //Becuse Prefix alwes have in fornt sides if not then its not prefix
            }
        }
        return str;
    }
}
public class Demo {
    public static void main(String x[]) {
        String str[] = { "flower", "flow", "flight" };
        Solution s = new Solution();

        // s.longestCommonPrefix(str);
        System.out.println(s.longestCommonPrefix(str));
    }
}

/*  Q2.  Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
      You may assume that each input would have exactly one solution, and you may not use the same element twice.
      You can return the answer in any order.
      Input: nums = [2,7,11,15], target = 9
      Output: [0,1]           */

class Solution {
    public int[] twoSum(int[] nums, int target) {

        for(int i=0;i<nums.length;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                if( nums[i] + nums[j] == target)
                {
                    return new int[] {i,j};
                }
            }
        }
        return new int[] {};
    }
}
public class Sum{
    public static void main(String x[]){
        int num[] = {2,7,11,15};
        int target = 9;

        Solution s = new Solution();
        int res[] = s.twoSum(num, target);

        System.out.println((res.length>0)? "[" +res[0]+ "," + res[1]+ "]" : "No Solution");
    }
}
/*
   Q3. Given an integer x, return true if x is a palindrome, and false otherwise.
    Input: x = 121
    Output: true
*/
import java.util.*;

class Solution {
    public boolean isPalindrome(int x) {
        if(x<0)
            return false;
        int temp = x;
        int rem = 0, rev = 0;
        while (temp != 0) { 
            rem = temp % 10; 
            rev = rev * 10 + rem; 
            temp /= 10; 
        }            
        if (rev == x)
            return true;
        else
            return false;
    }
}
public class Demo {
    public static void main(String x[]) {
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter Number");
        int num = sc.nextInt();

        Solution s = new Solution();
        System.out.println(s.isPalindrome(num));
    }
}